using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class TextCount : MonoBehaviour
{
    //텍스트에 카운트를 출력하는 기능을 구현
    //카운트는 계속 1씩 증가하는 형태로 처리
    public Text countText;
    int count = 0;
   
    void Start()
    {

        //StartCoroutine("함수의 이름(IEnumerator 형태의 함수)");
        //1. 문자열을 통해 함수를 찾아서 실행하는 형식
        // >> 오타가 발생해도 오류가 발생하진 않음. 하지만 제대로 실행되지 않음.
        //StopCoroutine()을 통한 외부에서의 중지하는 것이 가능
        //보통의 경우 이형태로 사용

        //StartCoroutine(함수의 이름());
        //2. 해당 함수를 호출해 실행 결과를 반환하는 형태
        // >> 오타 발생 시 오류 체크 가능
        //이 방식으로는 StopCoroutine()을 통한 외부에서의 중지 기능을 사용할 수 없음


        //해당 코루틴 중지 제어 가능
        StartCoroutine("CountPlus");
        //StopCoroutine("CountPlus");

        //성능은 더 좋음(중지 제어는 안됨. 비슷하게 구현은 가능하지만)
        //함수 형태 실행 방식
        //StartCoroutine(CountPlus());
    }
    IEnumerator CountPlus()
    {
        while (true)
        {
            count++;
            countText.text = count.ToString("N0");
            //C#의 ToString()을 통해 문자 형태로 변형이 가능
            //N0는 숫자 3자리 간격으로 ,를 표시하는 format(1000 -> 1,000)

            yield return new WaitForSeconds(1.0f);
            //다음 동작으로 넘어감
        }


        //Debug.Log("아아 마이크 테스트");
        //yield return new WaitForSeconds(1);

        ////yield는 일시적으로 CPU의 권한을 다른 함수에 위임하는 키워드

        //Debug.Log("밥만 먹고 올게");
        //yield return new WaitForSeconds(5);

        //Debug.Log("다시 일을 해볼까?");
    }
}
